{"version":3,"sources":["components/app_grid/content/Messages/Chat/Chat.module.css","components/app_grid/content/profile/Profile.module.css","components/app_grid/content/Messages/Dialogs/Dialogs.module.css","components/app_grid/menu/Menu.module.css","components/app_grid/header/Header.module.css","components/app_grid/content/Content.module.css","components/app_grid/content/Messages/Messages.module.css","components/app_grid/content/info/Info.module.css","components/app_grid/header/logo.png","serviceWorker.js","components/app_grid/header/Header.jsx","components/app_grid/menu/Menu.jsx","components/app_grid/content/Messages/Dialogs/Dialogs.jsx","components/app_grid/content/Messages/Dialogs/DialogsContainer.jsx","components/app_grid/content/Messages/Chat/ChatHeader.jsx","components/app_grid/content/Messages/Chat/MessageBubble.jsx","components/app_grid/content/Messages/Chat/Chat.jsx","redux/messagesPageReducer.js","components/app_grid/content/Messages/Chat/ChatContainer.jsx","components/app_grid/content/Messages/Messages.jsx","components/app_grid/content/info/Info.jsx","components/app_grid/content/profile/Profile.jsx","components/app_grid/content/profile/ProfileContainer.jsx","components/app_grid/content/ContentWrapper.jsx","components/app_grid/AppGrid.jsx","App.js","redux/profilePageReducer.js","redux/store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","styles","header","logo","src","require","alt","news","Item","props","itemText","to","linkTo","activeClassName","activeTab","item","name","Menu","menu","menuWrapper","DialogItem","Link","id","activeChat","dialogItem","profilePicture","img","Dialogs","dialogElements","chats","map","chat","profilePictureURL","dialogsWrapper","DialogsContainer","connect","state","messagesPage","dispatch","ChatHeader","wrapper","pPicture","currentChat","Name","MessageBubble","messageSpace","mine","sent","received","bubble","messageText","Chat","messagesItems","messages","msg","chatWrapper","Body","Input","placeholder","onChange","event","changeInput","target","value","currentInput","onClick","sendMessage","initialState","ChatContainer","ownProps","type","chatID","text","updateNewMessageTextCreator","Selector","useParams","Messages","messagesGrid","path","render","Info","infoWrapper","Profile","profileGrid","profilePic","profileInfo","croaks","Bio","bio","Button","ProfileContainer","profilePage","user","ContentWrapper","contentWrapper","AppGrid","App","reducers","combineReducers","action","length","slice","stateCopy","push","newMessageText","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.110850a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatWrapper\":\"Chat_chatWrapper__3sR7g\",\"Header\":\"Chat_Header__MS9Yw\",\"Body\":\"Chat_Body__1jaNy\",\"Input\":\"Chat_Input__18lm4\",\"wrapper\":\"Chat_wrapper__1C6ET\",\"pPicture\":\"Chat_pPicture__1Cdnz\",\"Name\":\"Chat_Name__3g71K\",\"messageSpace\":\"Chat_messageSpace__-Rgzd\",\"bubble\":\"Chat_bubble__2W47T\",\"sent\":\"Chat_sent__XPMJ2\",\"received\":\"Chat_received__3bE2E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileGrid\":\"Profile_profileGrid__1x7k1\",\"profilePic\":\"Profile_profilePic__eIVTb\",\"profileInfo\":\"Profile_profileInfo__RXenA\",\"menu\":\"Profile_menu__2zXne\",\"Name\":\"Profile_Name__Rdmk3\",\"Bio\":\"Profile_Bio__142v8\",\"Button\":\"Profile_Button__3CwY3\",\"croakWrapper\":\"Profile_croakWrapper__E0bgd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__3wive\",\"activeChat\":\"Dialogs_activeChat__3Aqy2\",\"dialogItem\":\"Dialogs_dialogItem__PgOBz\",\"Link\":\"Dialogs_Link__3iFHm\",\"profilePicture\":\"Dialogs_profilePicture__OMjyZ\",\"name\":\"Dialogs_name__2oSGY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2bXZL\",\"menuWrapper\":\"Menu_menuWrapper__21ldz\",\"item\":\"Menu_item__3k2Jh\",\"activeTab\":\"Menu_activeTab__nX8ts\",\"itemText\":\"Menu_itemText__1jy7r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__13rWd\",\"logo\":\"Header_logo__3Ugzt\",\"news\":\"Header_news__3y6zH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentWrapper\":\"Content_contentWrapper__xhfcA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesGrid\":\"Messages_messagesGrid__1-be4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoWrapper\":\"Info_infoWrapper__2Oz6L\"};","module.exports = __webpack_public_path__ + \"static/media/logo.64ca5c54.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport styles from \"./Header.module.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.header}>\r\n            <img className={styles.logo} src={require(\"../header/logo.png\")} alt='logo'/>\r\n            <span className={styles.news}>Messages are fake-sendable now!</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport styles from './Menu.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Item = (props) => {\r\n    return (\r\n        <NavLink className={styles.itemText} to={props.linkTo} activeClassName={styles.activeTab}>\r\n            <div className={styles.item}>{props.name}</div>\r\n        </NavLink>\r\n    )\r\n}\r\nconst Menu = () => {\r\n    return (\r\n        <div className={styles.menu}>\r\n            <div className={styles.menuWrapper}>\r\n                <Item name=\"🐸 Профиль\" linkTo=\"/profile\"/>\r\n                <Item name=\"💬 Диалоги\" linkTo=\"/messages\"/>\r\n                <Item name=\"🤓 Инфо\" linkTo=\"/info\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\nimport styles from './Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n// chats[],\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <NavLink className={styles.Link} to={`/messages/${props.id}`} activeClassName={styles.activeChat}>\r\n            <div className={styles.dialogItem}>\r\n                <div className={styles.profilePicture}>\r\n                    <img src={props.img} alt='Profile'/>\r\n                </div>\r\n                <div className={styles.name}>\r\n                    {props.name}\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogElements = props.chats.map(\r\n        chat => <DialogItem name={chat.name} img={chat.profilePictureURL} id={chat.id}/>\r\n    )\r\n    return (<div className={styles.dialogsWrapper}>\r\n            {dialogElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chats: state.messagesPage.chats,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {}\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n","import styles from \"./Chat.module.css\";\r\nimport React from \"react\";\r\n\r\nconst ChatHeader = (props) => {\r\n    return (<div className={styles.wrapper}>\r\n        <div className={styles.pPicture}><img src={props.currentChat.profilePictureURL} alt='Profile'/></div>\r\n        <div className={styles.Name}><b>{props.currentChat.name}</b></div>\r\n    </div>)\r\n}\r\nexport default ChatHeader","import styles from \"./Chat.module.css\";\r\nimport React from \"react\";\r\n\r\nconst MessageBubble = (props) => {\r\n    return (\r\n        <div className={styles.messageSpace}>\r\n            <div className={`${props.mine ? styles.sent : styles.received}`}>\r\n                <div className={styles.bubble}> {props.messageText}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MessageBubble","import React from \"react\";\r\nimport styles from \"./Chat.module.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport MessageBubble from \"./MessageBubble\";\r\n\r\n\r\n\r\nconst Chat = (props) => {\r\n\r\n    let messagesItems = props.currentChat.messages.map(\r\n        msg => <MessageBubble messageText={msg.messageText} id={msg.id} mine={msg.mine}/>\r\n    )\r\n\r\n    let onSendMessage = () => props.sendMessage();\r\n\r\n    let onTextInputChange = (event) => props.changeInput(event.target.value);\r\n\r\n    return (\r\n        <div className={styles.chatWrapper}>\r\n            <div className={styles.Header}><ChatHeader currentChat={props.currentChat}/></div>\r\n            <div className={styles.Body}>{messagesItems}</div>\r\n            <div className={styles.Input}>\r\n                <textarea placeholder='Новое сообщение' onChange={ onTextInputChange } value={props.currentChat.currentInput}/>\r\n                <button onClick={onSendMessage}>⇒</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Chat;","const SEND_MESSAGE = 'SEND-MESSAGE'\r\nconst UPDATE_MESSAGE_INPUT = 'UPDATE-NEW-MESSAGE-INPUT'\r\n\r\nconst initialState = {\r\n       chats: [\r\n        {\r\n            id: 0,\r\n            name: \"Playboi Carti\",\r\n            profilePictureURL: \"https://bstars.ru/media/djcatalog2/images/item/17/playboi-carti.1_f.jpg\",\r\n            currentInput: \"\",\r\n            messages: [\r\n                {\r\n                    id: 0,\r\n                    mine: false,\r\n                    messageText: \"They're trynna be crazy\"\r\n                },\r\n                {\r\n                    id: 1,\r\n                    mine: true,\r\n                    messageText: \"She wanna be Carti\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"Lil Pump\",\r\n            profilePictureURL: \"https://avatars.mds.yandex.net/get-ynews/56393/c75e2863dcdd080c632437162daccc65/orig\",\r\n            currentInput: \"\",\r\n            messages: [\r\n                {\r\n                    id: 0,\r\n                    mine: false,\r\n                    messageText: \"эчкере)\"\r\n                },\r\n                {\r\n                    id: 1,\r\n                    mine: true,\r\n                    messageText: \")\"\r\n                }\r\n            ]\r\n        },\r\n\r\n    ]\r\n\r\n\r\n}\r\n\r\nexport const messagesPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            if (state.chats[action.chatID].currentInput === \"\") return state // Empty messages ain't sent\r\n            let id = state.chats[action.chatID].messages.length !== 0 ? state.chats[action.chatID].messages.slice(-1)[0].id + 1 : 0;\r\n\r\n            let stateCopy = {...state}\r\n            stateCopy.chats = [...state.chats]\r\n            stateCopy.chats[action.chatID] = {...state.chats[action.chatID]}\r\n            stateCopy.chats[action.chatID].messages = [...state.chats[action.chatID].messages]\r\n\r\n            stateCopy.chats[action.chatID].messages.push(\r\n                {\r\n                    messageText: state.chats[action.chatID].currentInput,\r\n                    mine: true,\r\n                    id: id\r\n                }\r\n            )\r\n\r\n            stateCopy.chats[action.chatID].currentInput = \"\"\r\n            return stateCopy\r\n        }\r\n        case UPDATE_MESSAGE_INPUT: {\r\n            let newMessageText = action.text\r\n\r\n            let stateCopy = {...state}\r\n            stateCopy.chats = [...state.chats]\r\n            stateCopy.chats[action.chatID] = {...state.chats[action.chatID]}\r\n            stateCopy.chats[action.chatID].currentInput = newMessageText;\r\n            //debugger;\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (chatID) => (\r\n    {type: SEND_MESSAGE, chatID: chatID}\r\n)\r\n\r\nexport const updateNewMessageTextCreator = (text, id) => (\r\n    {type: UPDATE_MESSAGE_INPUT, text: text, chatID: id}\r\n)","import {connect} from \"react-redux\";\r\nimport Chat from \"./Chat\";\r\nimport {sendMessageActionCreator, updateNewMessageTextCreator} from \"../../../../../redux/messagesPageReducer\";\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        currentChat: state.messagesPage.chats[ownProps.id],\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        sendMessage: () => dispatch(sendMessageActionCreator(ownProps.id)),\r\n        changeInput: (text) =>  dispatch(updateNewMessageTextCreator(text, ownProps.id)),\r\n    }\r\n}\r\n\r\nconst ChatContainer = connect(mapStateToProps, mapDispatchToProps)(Chat)\r\n\r\nexport default ChatContainer\r\n\r\n","import React from 'react'\r\nimport styles from './Messages.module.css'\r\nimport {Route, useParams} from \"react-router-dom\"\r\nimport DialogsContainer from \"./Dialogs/DialogsContainer\";\r\nimport ChatContainer from \"./Chat/ChatContainer\";\r\n\r\nconst Selector = () => {\r\n    let {chat} = useParams();\r\n    return <ChatContainer id={chat} />\r\n}\r\n\r\nconst Messages = (props) => {\r\n    return (\r\n        <div className={styles.messagesGrid}>\r\n            <DialogsContainer/>\r\n            <Route path=\"/messages/:chat\" render={() => <Selector/> }/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Messages","import React from 'react'\r\nimport styles from './Info.module.css'\r\n\r\n\r\nconst Info = (props) => {\r\n    return (\r\n        <div className={styles.infoWrapper}>\r\n            <h3>Данный сайт не является каким-то коммерческим продуктом</h3>\r\n            <span>\r\n            И вообще он по приколу сделан и не надо плиз оставлять тут какие-то пернональные данные, использовать свои пароли и тд.\r\n            Я за ваши данные ответственности не несу.\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info","import React from 'react'\r\nimport styles from './Profile.module.css'\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={styles.profileGrid}>\r\n            <div className={styles.profilePic}><img src={props.profilePictureURL} alt='Profile'/></div>\r\n            <div className={styles.profileInfo}>\r\n                <div className={styles.Name}><b>{props.name}</b><span> | {props.croaks} Кваков</span></div>\r\n                <div className={styles.Bio}>{props.bio}</div>\r\n            </div>\r\n\r\n            <div className={styles.menu}>\r\n                <div className={styles.Button}>Написать</div>\r\n                <div className={styles.Button}>Квакнуть</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        name: state.profilePage.user.name,\r\n        croaks: state.profilePage.user.croaks,\r\n        bio: state.profilePage.user.bio,\r\n        profilePictureURL: state.profilePage.user.profilePictureURL\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {}\r\n}\r\n\r\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile)\r\n\r\nexport default ProfileContainer","import React from 'react'\r\nimport styles from './Content.module.css'\r\nimport {Route} from \"react-router-dom\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport Info from \"./info/Info\";\r\nimport ProfileContainer from \"./profile/ProfileContainer\";\r\n\r\nconst ContentWrapper = (props) => {\r\n    return (\r\n        <div className={styles.contentWrapper}>\r\n            <Route path='/profile' render={() => <ProfileContainer/>}/>\r\n            <Route path='/messages' render={() => <Messages/>}/>\r\n            <Route path='/info' render={() => <Info/>}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentWrapper","import React from 'react'\r\nimport Header from \"./header/Header\";\r\nimport \"./AppGrid.css\"\r\nimport Menu from \"./menu/Menu\";\r\nimport ContentWrapper from \"./content/ContentWrapper\";\r\n\r\n\r\nconst AppGrid = (props) => {\r\n    return (\r\n        <div className='app-grid'>\r\n            <Header/>\r\n            <Menu/>\r\n            <ContentWrapper/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppGrid","import React from 'react';\nimport AppGrid from \"./components/app_grid/AppGrid\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst App = (props) => {\n    return (\n        <BrowserRouter>\n                <AppGrid />\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: 22842069,\r\n        profilePictureURL: \"https://bstars.ru/media/djcatalog2/images/item/17/playboi-carti.1_f.jpg\",\r\n        name: \"Playboi Carti\",\r\n        croaks: 1337,\r\n        bio: \"die lit \"\r\n    }\r\n}\r\n\r\nexport const profilePageReducer = (state = initialState, action) => {\r\n    //TODO\r\n    return state;\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profilePageReducer} from \"./profilePageReducer\";\r\nimport {messagesPageReducer} from \"./messagesPageReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    messagesPage: messagesPageReducer\r\n})\r\n\r\nlet store = createStore(reducers)\r\n\r\nwindow.store=store\r\nexport default store;","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport store from \"./redux/store\"\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister(); // TODO ????\n"],"sourceRoot":""}